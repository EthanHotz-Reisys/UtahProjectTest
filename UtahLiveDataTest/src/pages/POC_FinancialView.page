<apex:page cache="false" standardController="POC_FinancialBatch__c" extensions="POC_FinancialCtrl" sidebar="false" showHeader="false" standardStylesheets="false">
	<apex:pageBlock >
		<apex:pageMessages ></apex:pageMessages>
	    <style>
	        .btn-space {
	            margin-right: 10px;
	        }
	        .td-amount{
	        	white-space: nowrap;
	        }
	        .td-total{
	        	font-weight: bold;
	        }
	        .th-header{
			    text-align: right;
			    max-width: 500px;
			    min-width: 180px;
			    word-wrap: break-word;
			}
			.w3-myfont {
			  	font-family: Arial, Helvetica, sans-serif;
			}
			.td-hight{
				height: 60px;
			}

	    </style>
	    <!-- Including JS and CSS resources -->
	    <!--<c:ExternalLibrary />   
	    <apex:composition template="GNT__PageTemplate">
	         <apex:define name="content">          
	            <GNT:FlexViewLayout packageId="{!packageId}" templateName="POC_FinancialBatchView" layoutType="View" recordId="{!recordId}" deleteURL="{!deleteURL}"
	                flexTableParameters="{!keyValueMap}"/>	
	        </apex:define>
	    </apex:composition>-->

	    <div style='overflow:auto; width:100%;height:93vh;'>
	            <table id="personDataTable" class="w3-table-all w3-small w3-centered w3-myfont">
	            </table>
	    </div>
	    <div style='overflow:auto; width:100%;height:1vh;'>

	    </div>
	    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
	    <script src="http://code.jquery.com/ui/1.9.1/jquery-ui.js"></script>

	    
	    <script src="{!$Resource.tableExport}"></script>
	    <script src="{!$Resource.jquerybase64}"></script>
	    <script src="{!$Resource.sprintf}"></script>
	    <script src="{!$Resource.jspdf}"></script>
	    <script src="{!$Resource.base64}"></script>
	    
	    <apex:form styleClass="w3-center">
		    <apex:commandButton action="{!approve}" value="Approve" id="approveButton" styleClass="w3-button w3-teal btn-space" rendered="{!fbStatus == 'Processed'}"/> 
		    <apex:commandButton action="{!reject}" value="Reject" id="rejectButton" styleClass="w3-button w3-teal btn-space" rendered="{!fbStatus == 'Processed'}"/>
		    <apex:commandButton action="{!cancel}" value="Cancel" id="cancelButton" styleClass="w3-button w3-teal btn-space"/>
		    <!--<button type="button" onClick ="$('#personDataTable').tableExport({type:'pdf',escape:'false'});">PDF</button> -->
		</apex:form>

		<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css"></link>
		<link rel="stylesheet" href="http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css"></link>


		<script>
			var rawItems = {!stageJSON};
			var mainItems = {!mainJSON};

			// console.log(rawItems);
			// console.log(mainItems);

			function getItems() {
			    var mainItemsObj = mainItems.reduce((previousValue, currentValue) => {
			        previousValue[currentValue.uniqueKeyFormula] = currentValue.awardAmount;
			        return previousValue;
			    }, {});
			    return rawItems.map(rawItem => {
			        let currentAwardAmount = rawItem.awardAmount && +rawItem.awardAmount || 0;
			        let mainAwardAmount = +mainItemsObj[rawItem.uniqueKeyFormula] || 0;
			        let differenceAmount = currentAwardAmount - mainAwardAmount;
			        return {
			            // "uniqueid": rawItem.UniqueKeyFormula__c,
			            // "programId": rawItem.Program__r.ProgramName__c,
			            // "reciepientId": rawItem.SubRecipient__r.Name,
			            // "amount": currentAwardAmount,
			            // "amountStatus": differenceAmount !== 0,
			            // "mainAmount": mainAwardAmount,
			            // "amountDifference": differenceAmount

			            "uniqueid": rawItem.uniqueKeyFormula,
			            "programId": rawItem.programName,
			            "reciepientId": rawItem.subRecipientName,
			            "amount": currentAwardAmount,
			            "amountStatus": differenceAmount !== 0,
			            "mainAmount": mainAwardAmount,
			            "amountDifference": differenceAmount
			        }
			    });
			}

			function getTransposeItems(mappedItems) {
			    //console.log(mappedItems);
			    var programIds = [...new Set(mappedItems.map(item => item.programId))];
			    var reciepientIds = [...new Set(mappedItems.map(item => item.reciepientId))];
			    var results = reciepientIds.map(reciepientId => {
			        var obj = {};
			        obj[reciepientId] = reciepientId;
			        programIds.forEach(programId => {
			            var award = mappedItems.filter(item => item.programId === programId && item.reciepientId === reciepientId)[0];
			            var amount = award && award.amount || '';
			            obj[programId] = award // amount;
			        });

			        return obj;
			    });

			    return results;
			}



			$(document).ready(function() {
			    var items = getItems(rawItems);
			    //console.log('mapped current items', items);
			    var columns = [...new Set(items.map(item => item.programId))];
			    columns.splice(0, 0, "Sub Reciepient Id");
			    columns.splice(columns.length, 0, 'Total');
			    var results = getTransposeItems(items);
			    drawHeader(columns);
			    drawTable(results);
			    //drawProgramsAggregates(items);
			});

			/*function mapProgramAmounts(data){
				var result = {};
				data.forEach(award => {
			        let amount = award && +award.amount || 0;
					if(result[award.programId]){
						result[award.programId] = result[award.programId] + amount;
					}
					else{
						result[award.programId] =  amount;
					}

				});
				return result;
			}

			function drawProgramsAggregates(items){
				console.log("Program Totals",mapProgramAmounts(items));
			}*/

			function drawTable(data) {
			    for (var i = 0; i < data.length; i++) {
			        drawDollarRow(data[i]);
			        //console.log(data[i]);
			    }
			    $('.uitip').tooltip();
			}

			function drawHeader(columns) {
			    var row = $("<tr />")
			    //console.log(row);
			    row.addClass("w3-sand");
			    $("#personDataTable").append(row);
			    columns.forEach(column => {
			        row.append($("<th class='th-header'>" + column + "</th>"));
			    });
			}

			/*
			function drawRow(rowData) {
				var row = $("<tr />")
				//console.log(row);
				$("#personDataTable").append(row);
				var keys = Object.keys(rowData);
				keys.forEach(key => {
					row.append($("<td>" + rowData[key] + "</td>"));
				});
			}
			*/

			Number.prototype.formatMoney = function(c, d, t) {
			    var n = this,
			        c = isNaN(c = Math.abs(c)) ? 2 : c,
			        d = d == undefined ? "." : d,
			        t = t == undefined ? "," : t,
			        s = n < 0 ? "-" : "",
			        i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
			        j = (j = i.length) > 3 ? j % 3 : 0;
			    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
			};

			function drawDollarRow(rowData) {
			    var row = $("<tr />")
			    //console.log(row);
			    $("#personDataTable").append(row);
			    var keys = Object.keys(rowData);
			    var rowTotal = 0;

			    for (i = 0; i < keys.length; i++) {
			        if (i == 0) {
			            row.append($("<td class='w3-sand td-total td-hight'>" + rowData[keys[i]] + "</td>"));
			        } else {
			            let award = rowData[keys[i]];
			            let mainAwardAmount = award && award.mainAmount || '',
			                formattedMainMoney = "$ " + parseFloat(mainAwardAmount).formatMoney(2, '.', ',');
			            let amount = award && award.amount || '',
			                formattedMoney = "$ " + parseFloat(amount).formatMoney(2, '.', ',');
			            let tdCss = award.amountDifference > 0 ? "w3-text-green" : award.amountDifference < 0 && "w3-text-red" || '';
			            let title = `Fiscal Year: ${formattedMainMoney}</br>Current:${formattedMoney}`;
			            row.append($(`<td class="uitip ${tdCss} td-amount" title="${title}">${formattedMoney}</td>`));

			            rowTotal = rowTotal + parseFloat(award.amount);
			        }
			    }

			    row.append($("<td class='td-total'>" + '$' + parseFloat(rowTotal).formatMoney(2, '.', ',') + "</td>"));
			    // keys.forEach(key => {
			    //     row.append($("<td>" + '$' + parseFloat(rowData[key]).formatMoney(2, '.', ',') + "</td>"));
			    // });
			}
		</script>
	</apex:pageBlock>
</apex:page>